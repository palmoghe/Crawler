
Queries used to set the database:

CREATE TABLE IF NOT EXISTS Publications 
(
	trackID INT NOT NULL,
	paperID INTEGER NOT NULL PRIMARY KEY AUTO_INCREMENT,
	title VARCHAR(250) NOT NULL,
	abstract VARCHAR(5000),
	journal VARCHAR(200),
	contentType VARCHAR(200),
	receivedDate DATE,
	revisionDate DATE,
	topicTags VARCHAR(250),
	URL VARCHAR(200) NOT NULL UNIQUE,
	publisher VARCHAR(50),
	FOREIGN KEY (trackID) REFERENCES Tracks(trackID)
	ON DELETE CASCADE
)

insert into Publications (trackID,title,abstract,journal,URL,contentType,topicTags,publisher,receivedDate,revisedDate) values ()

CREATE TABLE IF NOT EXISTS Tracks
(
	trackID INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
	trackName VARCHAR(100) NOT NULL UNIQUE
)	

insert into tracks (trackName) values ("Aerospace Industry"),("Applied Mechanics"),("Automotive Systems"),("Biomechanical Engineering"),("Boilers & Pressure Vessels"),("Building & Construction"),("Computer-Aided Design (CAD)"),("Computers & Information in Engineering"),("Conventional Power & Fuels"),("Defense Industry"),("Design Engineering"),("Dynamic Systems & Control"),("Electronic & Photonic Packaging"),("Energy"),("Energy Technology Management"),("Environmental Engineering"),("Fluids Engineering"),("Heat Transfer"),("Internal Combustion Engines"),("Manufacturing & Processing"),("Nanotechnology"),("Noise Control & Acoustics"),("Nondestructive Evaluation"),("Nuclear Engineering"),("Numerical Analysis"),("Ocean, Offshore & Arctic Engineering"),("Pipeline & Piping Systems"),("Renewable Energy"),("Robotics & Mechatronics"),("Transportation"),("Tribology");

CREATE TABLE IF NOT EXISTS Authors
(
	paperID INTEGER NOT NULL,
	authorID INTEGER NOT NULL,
	authorOrder INT NOT NULL,	
	FOREIGN KEY (paperID) REFERENCES Publications(paperID)
	ON DELETE CASCADE,
	FOREIGN KEY (authorID) REFERENCES AuthorInfo(authorID)
	ON DELETE CASCADE,
	PRIMARY KEY (paperID, authorID)
)

CREATE TABLE IF NOT EXISTS AuthorInfo
(
	authorID INTEGER NOT NULL PRIMARY KEY AUTO_INCREMENT,
	firstName VARCHAR(35) NOT NULL,
	middleName VARCHAR(35),
	lastName VARCHAR(35),
	gender CHAR(1),
	email VARCHAR(150) UNIQUE,
	affiliation VARCHAR(300),
	URL VARCHAR(350)
)

CREATE TABLE IF NOT EXISTS Mapping
(
	name VARCHAR(50) PRIMARY KEY,
	gender CHAR(1)
)

CREATE TABLE IF NOT EXISTS GenderCMapping
(
	authorID INTEGER NOT NULL PRIMARY KEY,
	scale DECIMAL(2,2),
	gender CHAR(1),
	FOREIGN KEY (authorID) REFERENCES AuthorInfo(authorID)
	ON DELETE CASCADE

)

CREATE TABLE IF NOT EXISTS GenderNamesor
(
	authorID INTEGER NOT NULL PRIMARY KEY,
	scale DECIMAL(2,2),
	gender CHAR(1),
	FOREIGN KEY (authorID) REFERENCES AuthorInfo(authorID)
	ON DELETE CASCADE
)


 file, with columns for name, gender, institution, paper title, 
 conference, tracks that the paper belongs to, and any other information you have on the authors/papers.

select authorinfo.firstname, authorinfo.lastname, authorinfo.email, authorinfo.URL, authorinfo.affiliation, mapping.gender, authors.paperid, publications.title, tracks.trackname, publications.year from authorinfo,mapping,authors,publications,tracks where authorinfo.firstname = mapping.name and mapping.gender is not null and mapping.scale > 0.4 and authorinfo.authorid=authors.authorid and publications.paperid = authors.paperid and tracks.trackid = publications.trackid order by authorinfo.firstname;

CREATE TABLE PaperTracks
(
	paperID INTEGER NOT NULL,
	trackID INT NOT NULL,
	FOREIGN KEY (paperID) REFERENCES publications(paperID)
	ON DELETE CASCADE,
	FOREIGN KEY (trackID) REFERENCES tracks(trackID)
	ON DELETE CASCADE,
	PRIMARY KEY (paperID, trackID)
)

create table records
(
	URL VARCHAR(200),
	trackID INT NOT NULL,
	FOREIGN KEY (URL) REFERENCES publications(URL)
	ON DELETE CASCADE,
	FOREIGN KEY (trackID) REFERENCES tracks(trackID)
	ON DELETE CASCADE,
	PRIMARY KEY (URL,trackID)
);

CREATE TABLE Record
(
RecordID INTEGER PRIMARY KEY NOT NULL AUTO_INCREMENT,
URL VARCHAR(200) NOT NULL UNIQUE
)

select publications.paperID, publications.topicTags, publications.journal, publications.abstract, title,authors.authorID, authorinfo.firstname,authorinfo.lastname from publications, authors, authorinfo where authors.paperID = publications.paperID and authorinfo.authorID=authors.authorID order by publications.paperID limit 10;



// Fill records

delimiter $$
create procedure fillrecords()
begin
declare finished integer;
declare ur varchar(200);
declare track integer;
declare mycursor cursor for select URL,trackID from publications;
declare continue handler
for not found set finished =1;
open mycursor;
myloop: loop
fetch mycursor into ur,track;
insert into records(URL,trackID) values(ur,track);
if finished = 1 then
leave myloop;
end if;
end loop myloop;
close mycursor;
end $$



delimiter $$
create procedure fillpapertracks()
begin
declare finished integer default 0;
declare paper integer default 0;
declare track integer default 0;
declare mycursor cursor for select paperID,trackID from publications;
declare continue handler
for not found set finished =1;
open mycursor;
myloop: loop
fetch mycursor into paper,track;
insert into paperTracks(paperID,trackID) values(paper,track);
if finished = 1 then
leave myloop;
end if;
end loop myloop;
close mycursor;
end $$

delimiter ;

SELECT distinct(firstname) from authorinfo
INTO OUTFILE 'names.csv'
FIELDS TERMINATED BY ','
ENCLOSED BY '"'
LINES TERMINATED BY '\n'


SELECT authorinfo.firstname, authorinfo.lastname, mapping.gender, authorinfo.email, authorinfo.URL, authorinfo.affiliation, publications.title, tracks.trackname, publications.year, publications.journal, publications.abstract, publications.topicTags, publications.URL from authorinfo,mapping,authors,publications,tracks where authorinfo.firstname = mapping.name and mapping.gender is not null and mapping.scale > 0.4 and authorinfo.authorid=authors.authorid and publications.paperid = authors.paperid and tracks.trackid = publications.trackid order by authorinfo.firstname 
INTO OUTFILE 'pub_data.csv'
FIELDS TERMINATED BY ','
ENCLOSED BY '"'
LINES TERMINATED BY '\n'

SELECT authorinfo.firstname, authorinfo.lastname, mapping.gender, authorinfo.URL, authorinfo.affiliation from authorinfo,mapping where authorinfo.firstname = mapping.name and mapping.scale >0.4 and mapping.gender is not null limit 100
INTO OUTFILE 'random_annotation.csv'
FIELDS TERMINATED BY ','
ENCLOSED BY '"'
LINES TERMINATED BY '\n'

// To mark all names with initials gender = null
 select name,gender from mapping where name REGEXP '^[a-zA-Z][/.]' =1 and gender is not null;

// All probabilities
Total valid male authors = 198405 
p(male) = 0.821311
Total valid female authors = 43166
p(female) = 0.178688
Total valid authors = 241571
// Probability > 0.4

SELECT COUNT(*) FROM authorinfo WHERE (SELECT gender FROM mapping WHERE NAME LIKE firstname) AND firstname REGEXP '^[a-zA-Z][/.]' =0;

select count(*) from publications where trackid=1 and paperid in (select paperid from authors where authorid in (select authorid from authorinfo where firstname in (select name from mapping where gender = 'F' and scale > 0.4)));
^ Give us no. of publications in track 1 which had at least 1 female author.
622

select count(*) from authorinfo where authorid in (select authorid from authors where paperid in ( select paperid from publications where trackid = 1)) and (select gender from mapping where name like authorinfo.firstname)='F'; 
^ No. of female authors who wrote at least 1 paper in track 1
788

select count(*) from authors where authorid in (select authorid from authorinfo where firstname in (select name from mapping where gender ='F' and scale>0.4));
^ Contributions by female authors
44221

Total Contributions by male authors: 204660

select name from mapping where gender is null
INTO OUTFILE 'C:/Users/Pallavi/Downloads/Courses/EECS 599/unlabelled_names.csv'
FIELDS TERMINATED BY ','
ENCLOSED BY '"'
LINES TERMINATED BY '\n'

ANALYTICS:
************

select count(distinct(authorid)) from authors where authorid in (select authorid from authorinfo where firstname in (select name from mapping where gender ='M' and scale>0.4)) and paperid in (select paperid from publications where trackid=1);

Total Contributions by male authors in track 1 
Male = 4086
Female = 800

**************************************
Authors:
select count(*) from authorinfo where firstname in ( select name from mapping where gender is not null);
Total:241312
Females:43079
Males:198233
P(F) = 0.17851
Ex. Track 1:
Total authors = 4837
Female = 788
Male = 4049


***************************************
SELECT firstname,lastname from authorinfo
INTO OUTFILE 'C:/Users/Pallavi/Downloads/Courses/EECS 599/full_names.csv'
FIELDS TERMINATED BY ','
ENCLOSED BY '"'
LINES TERMINATED BY '\n'
**************************************
Women authors by year 
SELECT YEAR, COUNT(DISTINCT(authorid)) FROM AUTHORS,publications WHERE publications.paperid = authors.paperid AND authorid IN (SELECT authorid FROM authorinfo WHERE firstname IN (SELECT NAME FROM mapping WHERE gender = 'F' AND scale>0.39)) AND YEAR>1993 GROUP BY YEAR;
SELECT YEAR, COUNT(DISTINCT(authorid)) FROM AUTHORS,publications WHERE publications.paperid = authors.paperid AND authorid IN (SELECT authorid FROM authorinfo WHERE firstname IN (SELECT NAME FROM mapping WHERE gender = 'F' AND scale>0.39));
**************************************
Men authors by year
SELECT YEAR, COUNT(DISTINCT(authorid)) FROM AUTHORS,publications WHERE publications.paperid = authors.paperid AND authorid IN (SELECT authorid FROM authorinfo WHERE firstname IN (SELECT NAME FROM mapping WHERE gender = 'M' AND scale>0.39)) AND YEAR>1993 GROUP BY YEAR;

**************************************
Publications by year by women ( No. of publications having at least 1 female author)
SELECT YEAR,COUNT(publications.paperid) FROM publications,AUTHORS WHERE publications.paperid = authors.paperid AND ( SELECT COUNT(authorid) FROM AUTHORS WHERE authors.paperid = publications.paperid AND authorid IN (SELECT authorid FROM authorinfo WHERE firstname IN (SELECT NAME FROM mapping WHERE gender = 'F' AND scale>0.39))) >= 1 GROUP BY YEAR
SELECT YEAR, COUNT(authorid) FROM AUTHORS,publications WHERE publications.paperid = authors.paperid AND authorid IN (SELECT authorid FROM authorinfo WHERE firstname IN (SELECT NAME FROM mapping WHERE gender = 'F' AND scale>0.39)) AND YEAR>1993 GROUP BY YEAR;
**************************************
Publications by year by men ( No. of publications having at least 1 male author)
SELECT YEAR,COUNT(publications.paperid) FROM publications,AUTHORS WHERE publications.paperid = authors.paperid AND ( SELECT COUNT(authorid) FROM AUTHORS WHERE authors.paperid = publications.paperid AND authorid IN (SELECT authorid FROM authorinfo WHERE firstname IN (SELECT NAME FROM mapping WHERE gender = 'M' AND scale>0.39))) >= 1 GROUP BY YEAR
SELECT YEAR, COUNT(authorid) FROM AUTHORS,publications WHERE publications.paperid = authors.paperid AND authorid IN (SELECT authorid FROM authorinfo WHERE firstname IN (SELECT NAME FROM mapping WHERE gender = 'M' AND scale>0.39)) AND YEAR>1993 GROUP BY YEAR;
**************************************
Percentage of women authors by year

**************************************
Percentage of male authors by year
SELECT YEAR, COUNT(authorid),trackname FROM AUTHORS,publications,tracks WHERE publications.trackid=tracks.trackid and publications.paperid = authors.paperid AND authorid IN (SELECT authorid FROM authorinfo WHERE firstname IN (SELECT NAME FROM mapping WHERE gender = 'F' AND scale>0.39)) AND YEAR>1993 and trackid=1 GROUP BY YEAR;

**************************************
Publications by females by year by categories

**************************************
Publications by men in ME topics by year
select count(paperid),tracks.trackname,year from authors,publications,mapping,tracks where publications.paperid = authors.paperid and authorid in (select authorid from authorinfo where firstname in (select name from mapping where gender = 'M' and scale>0.39)) and publications.trackid = tracks.trackid group by year,trackname;

***************************************
Publications by category over time by females
SELECT COUNT((authorid)),trackname FROM AUTHORS,publications,tracks WHERE publications.paperid = authors.paperid AND authorid IN (SELECT authorid FROM authorinfo WHERE firstname IN (SELECT NAME FROM mapping WHERE gender = 'F' AND scale>0.39)) AND tracks.trackid = publications.trackid GROUP BY trackname;
**********************
Top authors:
select authorid,count(*)"count" from authors group by authorid order by count DESC limit 10;

**********************************
Active years
CREATE VIEW my_view2 AS SELECT MAX(YEAR)"max", MIN(YEAR)"min" FROM mapping,publications,AUTHORS,authorinfo WHERE publications.paperid = authors.paperid AND authors.authorid = authorinfo.authorid AND authorinfo.firstname = mapping.name AND authors.authorid IN (SELECT authorid FROM authorinfo WHERE firstname IN (SELECT NAME FROM mapping WHERE gender = 'F' AND scale>0.39)) AND YEAR IS NOT NULL GROUP BY authorinfo.authorid;
SELECT AVG(my_view.`max` - my_view.`min` + 1) FROM my_view;


